; OM File Header - Saved 2024/08/27 11:36:12
; (7.04 :patc (om-make-point 95 85) (om-make-point 0 25) (om-make-point 1230 715) "" 183 0 nil "2024/08/27 11:36:08")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS")))(setf *om-current-persistent* (om-load-patch1 "pc-set-theory" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 639 370) (om-make-point 59 30) "midic" "\"midic\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER" (quote omcs::normal-order) (quote ((om-load-inputfun (quote input-funbox) "list of midics or pitch classes" "INPUT" (list 60 67 64 71)) (om-load-inputfunmenu1 (quote input-funmenu) "pc/midi or midic" "MODE" "midic" (list (list "midic" "midic") (list "pc/midi" "pc/midi"))))) (om-make-point 586 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC+OFF" (quote omcs::sc+off) (quote ((om-load-inputfun (quote input-funbox) "midis" "MIDIS" (list 60 61)))) (om-make-point 265 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-NAME 2" (quote omcs::sc-name) (quote ((om-load-inputfun (quote input-funbox) "midis" "MIDIS" (list 60 61)))) (om-make-point 141 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 798 368) (om-make-point 71 30) "pc/midi" "\"pc/midi\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER 2" (quote omcs::normal-order) (quote ((om-load-inputfun (quote input-funbox) "list of midics or pitch classes" "INPUT" (list 60 67 64 71)) (om-load-inputfunmenu1 (quote input-funmenu) "pc/midi or midic" "MODE" "pc/midi" (list (list "midic" "midic") (list "pc/midi" "pc/midi"))))) (om-make-point 745 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 163 30) (quote "midicents to midi values") "" (om-make-point 162 267) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 251 309) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 218 339) (om-make-point 26 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 168 30) (quote "menu with all set-classes") "" (om-make-point 886 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 211 30) (quote "all sets from choosen cardinality") "" (om-make-point 585 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 320 45) (quote "normal-order from midicents or pitch-classes/midi$obs: the duplicates are removed") "" (om-make-point 627 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 114 60) (quote "all subsets$including the SC$and empty set") "" (om-make-point 971 456) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 433 45) (quote "All subset classes (when card is less than the cardinality of SC)$or superset classes (when card is greater than the cardinality of SC).") "" (om-make-point 543 640) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 93 45) (quote "complement$pitch-classes") "" (om-make-point 417 637) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 124 45) (quote "all transpositions$of the prime-form") "" (om-make-point 275 640) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 138 30) (quote "interval-class vector") "" (om-make-point 134 644) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 84 30) (quote "prime-form") "" (om-make-point 35 644) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 121 75) (quote "set-class name$and transposition$relative to the$prime-form") "" (om-make-point 332 388) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 107 30) (quote "set-class name") "" (om-make-point 21 413) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 212 58) (quote "PC-SET-THEORY") "" (om-make-point 103 12) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 24.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-SUBSETS" (quote omcs::sc-subsets) (quote ((om-load-inputfun (quote input-funbox) "fn symbol or list" "FN" (list (quote |6-27A|) (quote |6-27B|))))) (om-make-point 987 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mc-to-pc" (om-load-patch-abs1 "mc-to-pc" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 120 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 122 207) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 109 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 97 146) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 77 176) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 1 3 0 nil 0) (2 0 3 1 nil 0) (1 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 230 437)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2921/4 1289/4) nil (list (list 2 11 3 7 7 5 10 8 10)) nil "mc-to-pc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-SC-NAMES" (quote omcs::all-sc-names) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "SC name" "SC" "|3-7A|" (list (list "|0-1|" "|0-1|") (list "|1-1|" "|1-1|") (list "|2-1|" "|2-1|") (list "|2-2|" "|2-2|") (list "|2-3|" "|2-3|") (list "|2-4|" "|2-4|") (list "|2-5|" "|2-5|") (list "|2-6|" "|2-6|") (list "|3-1|" "|3-1|") (list "|3-2A|" "|3-2A|") (list "|3-2B|" "|3-2B|") (list "|3-3A|" "|3-3A|") (list "|3-3B|" "|3-3B|") (list "|3-4A|" "|3-4A|") (list "|3-4B|" "|3-4B|") (list "|3-5A|" "|3-5A|") (list "|3-5B|" "|3-5B|") (list "|3-6|" "|3-6|") (list "|3-7A|" "|3-7A|") (list "|3-7B|" "|3-7B|") (list "|3-8A|" "|3-8A|") (list "|3-8B|" "|3-8B|") (list "|3-9|" "|3-9|") (list "|3-10|" "|3-10|") (list "|3-11A|" "|3-11A|") (list "|3-11B|" "|3-11B|") (list "|3-12|" "|3-12|") (list "|4-1|" "|4-1|") (list "|4-2A|" "|4-2A|") (list "|4-2B|" "|4-2B|") (list "|4-3|" "|4-3|") (list "|4-4A|" "|4-4A|") (list "|4-4B|" "|4-4B|") (list "|4-5A|" "|4-5A|") (list "|4-5B|" "|4-5B|") (list "|4-6|" "|4-6|") (list "|4-7|" "|4-7|") (list "|4-8|" "|4-8|") (list "|4-9|" "|4-9|") (list "|4-10|" "|4-10|") (list "|4-11A|" "|4-11A|") (list "|4-11B|" "|4-11B|") (list "|4-12A|" "|4-12A|") (list "|4-12B|" "|4-12B|") (list "|4-13A|" "|4-13A|") (list "|4-13B|" "|4-13B|") (list "|4-14A|" "|4-14A|") (list "|4-14B|" "|4-14B|") (list "|4-Z15A|" "|4-Z15A|") (list "|4-Z15B|" "|4-Z15B|") (list "|4-16A|" "|4-16A|") (list "|4-16B|" "|4-16B|") (list "|4-17|" "|4-17|") (list "|4-18A|" "|4-18A|") (list "|4-18B|" "|4-18B|") (list "|4-19A|" "|4-19A|") (list "|4-19B|" "|4-19B|") (list "|4-20|" "|4-20|") (list "|4-21|" "|4-21|") (list "|4-22A|" "|4-22A|") (list "|4-22B|" "|4-22B|") (list "|4-23|" "|4-23|") (list "|4-24|" "|4-24|") (list "|4-25|" "|4-25|") (list "|4-26|" "|4-26|") (list "|4-27A|" "|4-27A|") (list "|4-27B|" "|4-27B|") (list "|4-28|" "|4-28|") (list "|4-Z29A|" "|4-Z29A|") (list "|4-Z29B|" "|4-Z29B|") (list "|5-1|" "|5-1|") (list "|5-2A|" "|5-2A|") (list "|5-2B|" "|5-2B|") (list "|5-3A|" "|5-3A|") (list "|5-3B|" "|5-3B|") (list "|5-4A|" "|5-4A|") (list "|5-4B|" "|5-4B|") (list "|5-5A|" "|5-5A|") (list "|5-5B|" "|5-5B|") (list "|5-6A|" "|5-6A|") (list "|5-6B|" "|5-6B|") (list "|5-7A|" "|5-7A|") (list "|5-7B|" "|5-7B|") (list "|5-8|" "|5-8|") (list "|5-9A|" "|5-9A|") (list "|5-9B|" "|5-9B|") (list "|5-10A|" "|5-10A|") (list "|5-10B|" "|5-10B|") (list "|5-11A|" "|5-11A|") (list "|5-11B|" "|5-11B|") (list "|5-Z12|" "|5-Z12|") (list "|5-13A|" "|5-13A|") (list "|5-13B|" "|5-13B|") (list "|5-14A|" "|5-14A|") (list "|5-14B|" "|5-14B|") (list "|5-15|" "|5-15|") (list "|5-16A|" "|5-16A|") (list "|5-16B|" "|5-16B|") (list "|5-Z17|" "|5-Z17|") (list "|5-Z18A|" "|5-Z18A|") (list "|5-Z18B|" "|5-Z18B|") (list "|5-19A|" "|5-19A|") (list "|5-19B|" "|5-19B|") (list "|5-20A|" "|5-20A|") (list "|5-20B|" "|5-20B|") (list "|5-21A|" "|5-21A|") (list "|5-21B|" "|5-21B|") (list "|5-22|" "|5-22|") (list "|5-23A|" "|5-23A|") (list "|5-23B|" "|5-23B|") (list "|5-24A|" "|5-24A|") (list "|5-24B|" "|5-24B|") (list "|5-25A|" "|5-25A|") (list "|5-25B|" "|5-25B|") (list "|5-26A|" "|5-26A|") (list "|5-26B|" "|5-26B|") (list "|5-27A|" "|5-27A|") (list "|5-27B|" "|5-27B|") (list "|5-28A|" "|5-28A|") (list "|5-28B|" "|5-28B|") (list "|5-29A|" "|5-29A|") (list "|5-29B|" "|5-29B|") (list "|5-30A|" "|5-30A|") (list "|5-30B|" "|5-30B|") (list "|5-31A|" "|5-31A|") (list "|5-31B|" "|5-31B|") (list "|5-32A|" "|5-32A|") (list "|5-32B|" "|5-32B|") (list "|5-33|" "|5-33|") (list "|5-34|" "|5-34|") (list "|5-35|" "|5-35|") (list "|5-Z36A|" "|5-Z36A|") (list "|5-Z36B|" "|5-Z36B|") (list "|5-Z37|" "|5-Z37|") (list "|5-Z38A|" "|5-Z38A|") (list "|5-Z38B|" "|5-Z38B|") (list "|6-1|" "|6-1|") (list "|6-2A|" "|6-2A|") (list "|6-2B|" "|6-2B|") (list "|6-Z3A|" "|6-Z3A|") (list "|6-Z3B|" "|6-Z3B|") (list "|6-Z4|" "|6-Z4|") (list "|6-5A|" "|6-5A|") (list "|6-5B|" "|6-5B|") (list "|6-Z6|" "|6-Z6|") (list "|6-7|" "|6-7|") (list "|6-8|" "|6-8|") (list "|6-9A|" "|6-9A|") (list "|6-9B|" "|6-9B|") (list "|6-Z10A|" "|6-Z10A|") (list "|6-Z10B|" "|6-Z10B|") (list "|6-Z11A|" "|6-Z11A|") (list "|6-Z11B|" "|6-Z11B|") (list "|6-Z12A|" "|6-Z12A|") (list "|6-Z12B|" "|6-Z12B|") (list "|6-Z13|" "|6-Z13|") (list "|6-14A|" "|6-14A|") (list "|6-14B|" "|6-14B|") (list "|6-15A|" "|6-15A|") (list "|6-15B|" "|6-15B|") (list "|6-16A|" "|6-16A|") (list "|6-16B|" "|6-16B|") (list "|6-Z17A|" "|6-Z17A|") (list "|6-Z17B|" "|6-Z17B|") (list "|6-18A|" "|6-18A|") (list "|6-18B|" "|6-18B|") (list "|6-Z19A|" "|6-Z19A|") (list "|6-Z19B|" "|6-Z19B|") (list "|6-20|" "|6-20|") (list "|6-21A|" "|6-21A|") (list "|6-21B|" "|6-21B|") (list "|6-22A|" "|6-22A|") (list "|6-22B|" "|6-22B|") (list "|6-Z23|" "|6-Z23|") (list "|6-Z24A|" "|6-Z24A|") (list "|6-Z24B|" "|6-Z24B|") (list "|6-Z25A|" "|6-Z25A|") (list "|6-Z25B|" "|6-Z25B|") (list "|6-Z26|" "|6-Z26|") (list "|6-27A|" "|6-27A|") (list "|6-27B|" "|6-27B|") (list "|6-Z28|" "|6-Z28|") (list "|6-Z29|" "|6-Z29|") (list "|6-30A|" "|6-30A|") (list "|6-30B|" "|6-30B|") (list "|6-31A|" "|6-31A|") (list "|6-31B|" "|6-31B|") (list "|6-32|" "|6-32|") (list "|6-33A|" "|6-33A|") (list "|6-33B|" "|6-33B|") (list "|6-34A|" "|6-34A|") (list "|6-34B|" "|6-34B|") (list "|6-35|" "|6-35|") (list "|6-Z36A|" "|6-Z36A|") (list "|6-Z36B|" "|6-Z36B|") (list "|6-Z37|" "|6-Z37|") (list "|6-Z38|" "|6-Z38|") (list "|6-Z39A|" "|6-Z39A|") (list "|6-Z39B|" "|6-Z39B|") (list "|6-Z40A|" "|6-Z40A|") (list "|6-Z40B|" "|6-Z40B|") (list "|6-Z41A|" "|6-Z41A|") (list "|6-Z41B|" "|6-Z41B|") (list "|6-Z42|" "|6-Z42|") (list "|6-Z43A|" "|6-Z43A|") (list "|6-Z43B|" "|6-Z43B|") (list "|6-Z44A|" "|6-Z44A|") (list "|6-Z44B|" "|6-Z44B|") (list "|6-Z45|" "|6-Z45|") (list "|6-Z46A|" "|6-Z46A|") (list "|6-Z46B|" "|6-Z46B|") (list "|6-Z47A|" "|6-Z47A|") (list "|6-Z47B|" "|6-Z47B|") (list "|6-Z48|" "|6-Z48|") (list "|6-Z49|" "|6-Z49|") (list "|6-Z50|" "|6-Z50|") (list "|7-1|" "|7-1|") (list "|7-2A|" "|7-2A|") (list "|7-2B|" "|7-2B|") (list "|7-3A|" "|7-3A|") (list "|7-3B|" "|7-3B|") (list "|7-4A|" "|7-4A|") (list "|7-4B|" "|7-4B|") (list "|7-5A|" "|7-5A|") (list "|7-5B|" "|7-5B|") (list "|7-6A|" "|7-6A|") (list "|7-6B|" "|7-6B|") (list "|7-7A|" "|7-7A|") (list "|7-7B|" "|7-7B|") (list "|7-8|" "|7-8|") (list "|7-9A|" "|7-9A|") (list "|7-9B|" "|7-9B|") (list "|7-10A|" "|7-10A|") (list "|7-10B|" "|7-10B|") (list "|7-11A|" "|7-11A|") (list "|7-11B|" "|7-11B|") (list "|7-Z12|" "|7-Z12|") (list "|7-13A|" "|7-13A|") (list "|7-13B|" "|7-13B|") (list "|7-14A|" "|7-14A|") (list "|7-14B|" "|7-14B|") (list "|7-15|" "|7-15|") (list "|7-16A|" "|7-16A|") (list "|7-16B|" "|7-16B|") (list "|7-Z17|" "|7-Z17|") (list "|7-Z18A|" "|7-Z18A|") (list "|7-Z18B|" "|7-Z18B|") (list "|7-19A|" "|7-19A|") (list "|7-19B|" "|7-19B|") (list "|7-20A|" "|7-20A|") (list "|7-20B|" "|7-20B|") (list "|7-21A|" "|7-21A|") (list "|7-21B|" "|7-21B|") (list "|7-22|" "|7-22|") (list "|7-23A|" "|7-23A|") (list "|7-23B|" "|7-23B|") (list "|7-24A|" "|7-24A|") (list "|7-24B|" "|7-24B|") (list "|7-25A|" "|7-25A|") (list "|7-25B|" "|7-25B|") (list "|7-26A|" "|7-26A|") (list "|7-26B|" "|7-26B|") (list "|7-27A|" "|7-27A|") (list "|7-27B|" "|7-27B|") (list "|7-28A|" "|7-28A|") (list "|7-28B|" "|7-28B|") (list "|7-29A|" "|7-29A|") (list "|7-29B|" "|7-29B|") (list "|7-30A|" "|7-30A|") (list "|7-30B|" "|7-30B|") (list "|7-31A|" "|7-31A|") (list "|7-31B|" "|7-31B|") (list "|7-32A|" "|7-32A|") (list "|7-32B|" "|7-32B|") (list "|7-33|" "|7-33|") (list "|7-34|" "|7-34|") (list "|7-35|" "|7-35|") (list "|7-Z36A|" "|7-Z36A|") (list "|7-Z36B|" "|7-Z36B|") (list "|7-Z37|" "|7-Z37|") (list "|7-Z38A|" "|7-Z38A|") (list "|7-Z38B|" "|7-Z38B|") (list "|8-1|" "|8-1|") (list "|8-2A|" "|8-2A|") (list "|8-2B|" "|8-2B|") (list "|8-3|" "|8-3|") (list "|8-4A|" "|8-4A|") (list "|8-4B|" "|8-4B|") (list "|8-5A|" "|8-5A|") (list "|8-5B|" "|8-5B|") (list "|8-6|" "|8-6|") (list "|8-7|" "|8-7|") (list "|8-8|" "|8-8|") (list "|8-9|" "|8-9|") (list "|8-10|" "|8-10|") (list "|8-11A|" "|8-11A|") (list "|8-11B|" "|8-11B|") (list "|8-12A|" "|8-12A|") (list "|8-12B|" "|8-12B|") (list "|8-13A|" "|8-13A|") (list "|8-13B|" "|8-13B|") (list "|8-14A|" "|8-14A|") (list "|8-14B|" "|8-14B|") (list "|8-Z15A|" "|8-Z15A|") (list "|8-Z15B|" "|8-Z15B|") (list "|8-16A|" "|8-16A|") (list "|8-16B|" "|8-16B|") (list "|8-17|" "|8-17|") (list "|8-18A|" "|8-18A|") (list "|8-18B|" "|8-18B|") (list "|8-19A|" "|8-19A|") (list "|8-19B|" "|8-19B|") (list "|8-20|" "|8-20|") (list "|8-21|" "|8-21|") (list "|8-22A|" "|8-22A|") (list "|8-22B|" "|8-22B|") (list "|8-23|" "|8-23|") (list "|8-24|" "|8-24|") (list "|8-25|" "|8-25|") (list "|8-26|" "|8-26|") (list "|8-27A|" "|8-27A|") (list "|8-27B|" "|8-27B|") (list "|8-28|" "|8-28|") (list "|8-Z29A|" "|8-Z29A|") (list "|8-Z29B|" "|8-Z29B|") (list "|9-1|" "|9-1|") (list "|9-2A|" "|9-2A|") (list "|9-2B|" "|9-2B|") (list "|9-3A|" "|9-3A|") (list "|9-3B|" "|9-3B|") (list "|9-4A|" "|9-4A|") (list "|9-4B|" "|9-4B|") (list "|9-5A|" "|9-5A|") (list "|9-5B|" "|9-5B|") (list "|9-6|" "|9-6|") (list "|9-7A|" "|9-7A|") (list "|9-7B|" "|9-7B|") (list "|9-8A|" "|9-8A|") (list "|9-8B|" "|9-8B|") (list "|9-9|" "|9-9|") (list "|9-10|" "|9-10|") (list "|9-11A|" "|9-11A|") (list "|9-11B|" "|9-11B|") (list "|9-12|" "|9-12|") (list "|10-1|" "|10-1|") (list "|10-2|" "|10-2|") (list "|10-3|" "|10-3|") (list "|10-4|" "|10-4|") (list "|10-5|" "|10-5|") (list "|10-6|" "|10-6|") (list "|11-1|" "|11-1|") (list "|12-1|" "|12-1|"))))) (om-make-point 930 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 827 529) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB/SUPERSETS 2" (quote omcs::sub/supersets) (quote ((om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)) (om-load-inputfun (quote input-funbox) "card" "CARD" 9))) (om-make-point 781 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 611 526) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB/SUPERSETS" (quote omcs::sub/supersets) (quote ((om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)) (om-load-inputfun (quote input-funbox) "card" "CARD" 9))) (om-make-point 565 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 350 523) (om-make-point 116 30) (quote :complement-pcs) ":complement-pcs" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO 4" (quote omcs::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :complement-pcs) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 446 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 229 526) (om-make-point 98 30) (quote :member-sets) ":member-sets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO 3" (quote omcs::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :member-sets) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 303 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 165 522) (om-make-point 40 30) (quote :icv) ":icv" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO 2" (quote omcs::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :icv) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 183 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 36 519) (om-make-point 57 30) (quote :prime) ":prime" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO" (quote omcs::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :prime) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 70 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 667 68) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCS-CARD" (quote omcs::scs-card) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "integer" "CARD" 6 (list (list "1" 1) (list "2" 2) (list "3" 3) (list "4" 4) (list "5" 5) (list "6" 6) (list "7" 7) (list "8" 8) (list "9" 9) (list "10" 10) (list "11" 11) (list "12" 12))))) (om-make-point 652 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-chord" (om-load-patch-abs1 "random-chord" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 114 30) (quote "intervals mod12") "" (om-make-point 260 359) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 30) (quote "midi - from 21 to 60") "" (om-make-point 89 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 36 30) (quote "pcs") "" (om-make-point 326 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 116 30) (quote "number of notes") "" (om-make-point 384 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 133 587) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 155 177) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 142 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 21) (om-load-inputfun (quote input-funbox) "max" "HIGH" 60))) (om-make-point 102 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 416 293) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 380 347) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 357 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 433 372) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 395 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 11))) (om-make-point 308 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 352 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 12))) (om-make-point 390 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 4 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (15 0 10 0 nil 0) (9 1 12 0 nil 0) (11 0 12 1 nil 0) (6 0 13 0 nil 0) (12 0 13 1 nil 0) (14 0 15 0 nil 0) (16 0 15 1 nil 0))) 7.04 nil "" (om-make-point 123 25) (om-make-point 651 689)) (quote nil) (om-make-point 2569/6 3) nil (list (list 5000 5900 6300 6700 6700 7700 8200 9200 9400)) nil "random-chord"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 425 85) (om-make-point 83 184) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5900 6300 6700 6700 7700 8200 9200 9400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 564 269) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((39 1 1 0 nil 0) (0 0 1 1 nil 0) (8 0 2 0 nil 0) (8 0 3 0 nil 0) (22 0 5 0 nil 0) (4 0 5 1 nil 0) (39 1 8 0 nil 0) (7 0 8 1 nil 0) (3 0 21 0 nil 0) (39 1 22 0 nil 0) (3 0 25 0 nil 0) (24 0 25 1 nil 0) (3 0 27 0 nil 0) (26 0 27 1 nil 0) (28 0 29 0 nil 0) (3 0 29 1 nil 0) (30 0 31 0 nil 0) (3 0 31 1 nil 0) (32 0 33 0 nil 0) (3 0 33 1 nil 0) (34 0 35 0 nil 0) (3 0 35 1 nil 0) (36 0 37 0 nil 0) (38 0 39 1 nil 0))) nil 7.04))
